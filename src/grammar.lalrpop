use crate::ast::{self, Expr, Stmt, FuncCall, FuncDeclare};

grammar;

match {
    // delimiters
    "{", "}", "(", ")", "[", "]", ";", ":", ".", ",", "|",

    // declaration
    "let",

    // operators
    "=", "==", ">", "<", "+", "-", "*", "/",

    // syntax constructs
    "=>", "if", "else",

    // literals
    "true", "false",
    r"[0-9]+",         // int
    r"[0-9]+\.[0-9]+", // float
    r#""[^"]*""#,      // string

    // symbols
    r"[a-zA-Z_][a-zA-Z_0-9]*",  

}

pub Program: Vec<Stmt> = {
    <exprs:StmtList> => exprs
};

StmtList: Vec<Stmt> = {
    <first:Expr> ";" <rest:StmtList> => {
        let mut stmts = vec![Stmt { expr: first }];
        stmts.extend(rest);
        stmts
    },
    <expr:Expr> ";" => vec![Stmt { expr }],
};

Expr: Expr = {
    Assignment,
    Equality,
    IfElse,
};

// TODO: Support just if without else, and else elif chains.
IfElse: Expr = {
    "if" <cond:Expr> "{" <then_block:StmtList> "}" "else" "{" <else_block:StmtList> "}" => Expr::IfElse(Box::new(cond), then_block, else_block),
    // "if" <cond:Expr> "{" <then_block:StmtList> "}" => {
    //     Expr::IfElse(Box::new(cond), then_block, None)
    // },
};

Assignment: Expr = {
    "let" <i:Identifier> "=" <v:Expr> => Expr::Assignment(i, Box::new(v)),
};

Equality: Expr = {
    <l:Equality> "==" <r:Relational> => Expr::Eq(Box::new(l), Box::new(r)),
    Relational,
};

Relational: Expr = {
    <l:Relational> ">" <r:Addition> => Expr::Gt(Box::new(l), Box::new(r)),
    <l:Relational> "<" <r:Addition> => Expr::Lt(Box::new(l), Box::new(r)),
    Addition,
};

Addition: Expr = {
    <l:Addition> "+" <r:Multiplication> => Expr::Add(Box::new(l), Box::new(r)),
    <l:Addition> "-" <r:Multiplication> => Expr::Sub(Box::new(l), Box::new(r)),
    Multiplication,
};

Multiplication: Expr = {
    <l:Multiplication> "*" <r:Unary> => Expr::Mult(Box::new(l), Box::new(r)),
    <l:Multiplication> "/" <r:Unary> => Expr::Div(Box::new(l), Box::new(r)),
    Unary,
};

Unary: Expr = {
    "-" <expr:Unary> => Expr::Negate(Box::new(expr)),
    PostfixExpression,
};

PostfixExpression: Expr = {
    <primary:Primary> "(" <args:ExprList> ")" => Expr::FuncCall(FuncCall { func: Box::new(primary), args }),
    Primary,
};

ExprList: Vec<Expr> = Comma<Expr>;

// Stubbed out for now
Primary: Expr = {
    Literal => Expr::Literal(<>),
    Identifier => Expr::Identifier(<>),
    FuncDeclare,
};

Literal: ast::Literal = {
    Int => ast::Literal::Int(<>),
    Float => ast::Literal::Float(<>),
    Str => ast::Literal::String(<>),
    Bool => ast::Literal::Bool(<>),
}

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z_0-9]*" => <>.to_string(),
};

FuncDeclare: Expr = {
    "(" <params:ParameterList> ")" "=>" "{" <stmts:StmtList> "}" => Expr::FuncDeclare(FuncDeclare{ params, stmts, is_closure: false }),
    "|" <params:ParameterList> "|" "=>" "{" <stmts:StmtList> "}" => Expr::FuncDeclare(FuncDeclare{ params, stmts, is_closure: true }),
};

ParameterList: Vec<(String, String)> = Comma<Parameter>;

// Stubbed to support type annotations.
Parameter: (String, String) = {
    <ident:Identifier> ":" <ty:Identifier> => (ident, ty),
};

Bool: bool = {
    "true" => true,
    "false" => false,
};

Int: i32 = {
    r"[0-9]+" => <>.parse().unwrap(),
};

Float: f64 = {
    r"[0-9]+\.[0-9]+" => <>.parse().unwrap(),
};

Str: String = {
    r#""[^"]*""# => <>[1..<>.len()-1].to_string(),  // Remove the first and last characters (the quotes)
};

// Utility

Comma<T>: Vec<T> = {
    <item:T> "," <rest:Comma<T>> => {
        let mut list = vec![item];
        list.extend(rest);
        list
    },
    <item:T> => vec![item],
    => vec![],
};